name: Build image, push to DockerHub and deploy to Amazon ECS on merge to master

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-west-1
  REGISTRY: themalikyusuf
  REPOSITORY: python-challenge
  ECS_SERVICE: test-project-service
  ECS_CLUSTER: test-project-cluster
  ECS_TASK_DEFINITION: aws/task-definition.json
  CONTAINER_NAME: test-project

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build, tag, and push image to Dockerhub
      id: build-image
      env:
        REGISTRY: themalikyusuf
        REPOSITORY: python-challenge
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:$IMAGE_TAG .
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:$IMAGE_TAG
        echo "::set-output name=image::${{ env.REGISTRY }}/${{ env.REPOSITORY }}:$IMAGE_TAG"

    - name: Fill in the new image ID in the ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
